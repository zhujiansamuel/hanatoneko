"""
Django settings for hanatoneko project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import ast

def get_bool_from_env(name, default_value):
    if name in os.environ:
        value = os.environ[name]
        try:
            return ast.literal_eval( value )
        except ValueError as e:
            raise ValueError( "{} is an invalid value for {}".format( value, name )
                              ) from e
    return default_value

def get_list(text):
    return [item.strip() for item in text.split( "," )]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7zl8tp6c644z!)yr*3a2i9#@4=@2*zh8687v#ocw+a#1x^w!li'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_prices",
    'hanafrontend.apps.HanafrontendConfig',
    'hanabackend.apps.HanabackendConfig',
    "django.forms",
    "simple_svg",
    'storages',
    "versatileimagefield",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hanatoneko.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates'
        ,
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                ],
            'string_if_invalid': '<< MISSING "%s" >>' if DEBUG else "",
        },
    },
]




WSGI_APPLICATION = 'hanatoneko.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

TIME_ZONE = "Asia/Tokyo"
LANGUAGE_CODE = "ja"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Amazon S3 configuration
# AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_ACCESS_KEY_ID = "AKIA2ZHFFHS4U5VXU4QX"

AWS_LOCATION = os.environ.get( "AWS_LOCATION", "" )

# AWS_MEDIA_BUCKET_NAME = os.environ.get("AWS_MEDIA_BUCKET_NAME")
AWS_MEDIA_BUCKET_NAME = "tempsiteforsam"

# AWS_MEDIA_CUSTOM_DOMAIN = os.environ.get("AWS_MEDIA_CUSTOM_DOMAIN")
AWS_MEDIA_CUSTOM_DOMAIN = "tempsiteforsam.s3.ap-northeast-1.amazonaws.com"

AWS_QUERYSTRING_AUTH = get_bool_from_env( "AWS_QUERYSTRING_AUTH", False )

AWS_S3_CUSTOM_DOMAIN = os.environ.get( "AWS_STATIC_CUSTOM_DOMAIN" )
AWS_S3_ENDPOINT_URL = os.environ.get( "AWS_S3_ENDPOINT_URL", None )

# AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_SECRET_ACCESS_KEY = "PP1jwhz/91OyKsI//mdAKJOT6bLSmd1dZi2rWGbi"

AWS_STORAGE_BUCKET_NAME = os.environ.get( "AWS_STORAGE_BUCKET_NAME" )
AWS_DEFAULT_ACL = os.environ.get( "AWS_DEFAULT_ACL", None )


if AWS_STORAGE_BUCKET_NAME:
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

if AWS_MEDIA_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "core.storages.S3MediaStorage"
    THUMBNAIL_DEFAULT_STORAGE = DEFAULT_FILE_STORAGE


MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

if AWS_STORAGE_BUCKET_NAME:
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

if AWS_MEDIA_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = "core.storages.S3MediaStorage"
    THUMBNAIL_DEFAULT_STORAGE = DEFAULT_FILE_STORAGE

# CELERY SETTINGS
CELERY_BROKER_URL = (
        os.environ.get( "CELERY_BROKER_URL", os.environ.get( "CLOUDAMQP_URL" ) ) or ""
)
CELERY_TASK_ALWAYS_EAGER = not CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_RESULT_BACKEND = os.environ.get( "CELERY_RESULT_BACKEND", None )

DEFAULT_CURRENCY_CODE_LENGTH = 3
DEFAULT_COUNTRY = os.environ.get( "DEFAULT_COUNTRY", "JP" )

DEFAULT_CURRENCY = os.environ.get( "DEFAULT_CURRENCY", "JPY" )

PAGINATE_BY = 5



